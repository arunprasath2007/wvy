@model SearchResult<Space, SpaceQuery>
@{
    Title = "Spaces";
    if (Model.Query.Archived ?? false) {
        Title = "Archived spaces";
    }
    if (Model.Query.Trashed ?? false) {
        Title = "Trashed spaces";
    }
    var tab = ViewContext.RouteData.Values["tab"] as string;

}

@section navbar_secondary {
    <nav class="nav nav-tabs">
        @if (tab == null || tab == "spaces") {
            @(Html.ActionLink<SpaceController>(c => c.Index(null, null, null), text: "All", htmlAttributes: new { @class = "nav-link active" }, active: LinkActive.Path))
        } else {
            @(Html.ActionLink<SpaceController>(c => c.Index(null, null, null), text: "All", htmlAttributes: new { @class = "nav-link" }, active: LinkActive.Path))
        }
        @(Html.ActionLink<SpaceController>(c => c.Index(null, "projects", null), text: "Projects", htmlAttributes: new { @class = "nav-link" }, active: LinkActive.Path))
        @(Html.ActionLink<SpaceController>(c => c.Index(null, "teams", null), text: "Teams", htmlAttributes: new { @class = "nav-link" }, active: LinkActive.Path))
    </nav>

    @if (User.SystemPermissions.Contains(Permission.CreateSpace)) {
        <div class="fab">
            <a class="btn btn-round btn-primary waves-effect" href="@(Url.Action<SpaceController>(c => c.New()))" title="Add space">@Html.SvgIcon("plus")</a>
        </div>
    }
}

<div class="container-fluid my-3">
    @(Html.FilterForm<SpaceController>(c => c.Index(null, tab, null), Model.Query))

    @if (Model.HasItems()) {
        <table class="table table-hover table-spaces">
            <thead>
                <tr>
                    <th class="table-icon"></th>
                    <th>Name</th>
                    <th class="text-right">Members</th>
                    <th class="table-icon"></th>
                </tr>
            </thead>
            <tbody id="infinite-scroll-target">
                @{ Html.RenderPartial("_SpaceTable", Model); }
            </tbody>
        </table>
        @Html.ScrollMore(Model)

    } else if (!Model.Query.Text.IsNullOrWhiteSpace()) {
        <p class="mt-3">@Html.SearchResultText(Model)</p>
    }

    @if ((Model.Query.Archived ?? false) || (Model.Query.Trashed ?? false)) {
        <p class="text-muted text-center"><small>Back to <a href="@Url.Rebuild("archived", null, "trashed", null)">active</a> @(tab ?? "spaces").</small></p>
    } else if ((ViewBag.Archived ?? false) && (ViewBag.Trashed ?? false)) {
        <p class="text-muted text-center"><small>See <a href="@Url.Rebuild("archived", "true", "trashed", null)">archived</a> and <a href="@Url.Rebuild("archived", null, "trashed", "true")">trashed</a> @(tab ?? "spaces").</small></p>
    } else if (ViewBag.Archived ?? false) {
        <p class="text-muted text-center"><small>See <a href="@Url.Rebuild("archived", "true", "trashed", null)">archived</a> @(tab ?? "spaces").</small></p>
    } else if (ViewBag.Trashed ?? false) {
        <p class="text-muted text-center"><small>See <a href="@Url.Rebuild("archived", null, "trashed", "true")">trashed</a> @(tab ?? "spaces").</small></p>
    }
</div>
