@model Content
@{
    var draftable = Model as IDraftable;
    var lockable = Model as ILockable;
    var file = Model as FileBase;
}

<div class="dropdown">
    <button type="button" class="btn btn-icon dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="Toggle Dropdown">
        @Html.SvgIcon("dots-vertical")
    </button>
    <div class="dropdown-menu dropdown-menu-right">
        <button type="button" class="dropdown-item" data-toggle="modal" data-target="#share-modal" data-share-type="@Model.Type" data-share-id="@Model.Id" data-share-title="Share @Model.Kind()">@Html.SvgIcon("share-variant", "success") Share</button>

        @if (file != null && FileHelper.IsOfficeDocument(file.Name) && Model.HasPermission(Permission.Edit)) {
            <a class="dropdown-item" href="@file.OfficeUrl()">@Html.SvgIcon(Model)<span>Open in @OfficeHelper.GetProductName(file.Name)</span></a>
        }

        @if (file != null) {
            <a class="dropdown-item" href="@file.FileUrl(download:true)">@Html.SvgIcon("download", "primary")<span>Download</span></a>
        }


        @if (Model.HasPermission(Permission.Edit)) {
            if (lockable?.LockedById == User.Id) {
                if (Model.MetaData().EditMode == UpsertMode.Page) {
                    <a class="dropdown-item" href="@Model.Url()/edit">@Html.SvgIcon("pencil", "primary")<span>Edit</span></a>
                } else if (Model.MetaData().EditMode == UpsertMode.Modal) {
                    <a class="dropdown-item" href="#" data-toggle="modal" data-target="#upsert-content-modal" data-param="@Model.ContentGuid" data-path="@Model.Url()/edit" data-title="Edit @Model.MetaData().Name">@Html.SvgIcon("pencil", "primary")<span>Edit</span></a>
                }

            } else if (lockable?.IsLocked() ?? false) {
                <a class="dropdown-item" title="Unlock and Edit" href="@Model.Url()/edit?force=true">@Html.SvgIcon("pencil", "primary")<span>Unlock</span></a>
            } else {
                if (Model.MetaData().EditMode == UpsertMode.Page) {
                    <a class="dropdown-item" href="@Model.Url()/edit">@Html.SvgIcon("pencil", "primary")<span>Edit</span></a>
                } else if (Model.MetaData().EditMode == UpsertMode.Modal) {
                    <a class="dropdown-item" href="#" data-toggle="modal" data-target="#upsert-content-modal" data-param="@Model.ContentGuid" data-path="@Model.Url()/edit" data-title="Edit @Model.MetaData().Name">@Html.SvgIcon("pencil", "primary")<span>Edit</span></a>
                }
            }
            <button class="dropdown-item" type="button" data-toggle="modal" data-target="#move-content-modal" data-path="@(Url.Action<ContentController>(c => c.MoveModal(Model.Id)))" title="Move @Model.Kind()">@Html.SvgIcon("undo", "warning") Move</button>
        }


        @if (Model is IStarrable starrable) {
            @Html.StarToggle(starrable, false, htmlAttributes: new { @class = "dropdown-item toggle-dropdown" })
        }

        @if (Model is IFollowable followable) {
            @Html.SubscribeToggle(followable, htmlAttributes: new { @class = "dropdown-item toggle-dropdown" })
        }

        @if (Model.HasPermission(Permission.Delete)) {
            <form action="@(Url.Action(nameof(ContentController.Trash), typeof(ContentController).ControllerName(), new { id = Model.Id }))" method="post" data-turboform>
                <button type="submit" class="dropdown-item">@Html.SvgIcon("delete", "danger") Trash</button>
            </form>
        }
    </div>
</div>
