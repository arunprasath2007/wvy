@model Weavy.Core.Models.File
@{
    var fmt = Model.GetPreviewFormat();
}

<div class="dropdown">
    <button type="button" class="btn btn-icon dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="Toggle Dropdown">
        @Html.SvgIcon("dots-vertical")
    </button>
    <div class="dropdown-menu dropdown-menu-right">
        @if (FileHelper.IsOfficeDocument(Model.Name)) {
            <a class="dropdown-item" href="@Model.OfficeUrl()">@Html.SvgIcon(Model.IconName(), Model.IconColor())<span>Open in @OfficeHelper.GetProductName(Model.Name)</span></a>
        }
        @if (fmt == PreviewFormat.Image || fmt == PreviewFormat.Document) {
            var attrs = Html.PreviewAttributes(Model, href: Model.ContentUrl());
            <a class="dropdown-item" href="@Model.ContentUrl()" @Html.Raw(attrs.AsHtmlAttributes())>@Html.SvgIcon("magnify")<span>Preview</span></a>
        }

        <a class="dropdown-item" href="@Model.ContentUrl(download: true)">@Html.SvgIcon("download") Download</a>
        <button type="button" class="dropdown-item" data-toggle="modal" data-target="#share-modal" data-share-type="@Model.Type" data-share-id="@Model.Id" data-share-title="Share @Model.Kind">@Html.SvgIcon("share-variant", "success") Share</button>


        @if (Folder is IIntegration) {
            // nothing we can do with files from dropbox, onedrive etc
            @Html.StarToggle(Model, false, new { @class = "dropdown-item toggle-dropdown" })
            @Html.SubscribeToggle(Model, new { @class = "dropdown-item toggle-dropdown" })
        } else {
            if (Model.HasPermission(Permission.Edit)) {
                <a class="dropdown-item" href="@Model.Url()/edit">@Html.SvgIcon("pencil", "primary") Edit</a>
                if (Model.AttachedTo?.Type == EntityType.App) {
                    <button class="dropdown-item" type="button" data-toggle="modal" data-target="#move-content-modal" data-path="@(Url.Action<ContentController>(c => c.MoveFileModal(Model.Id)))" title="Move @Model.Kind">@Html.SvgIcon("undo", "warning") Move</button>
                }
            }
            @Html.StarToggle(Model, false, new { @class = "dropdown-item toggle-dropdown" })
            @Html.SubscribeToggle(Model, new { @class = "dropdown-item toggle-dropdown" })
            if (Model.HasPermission(Permission.Delete)) {
                <form action="@(Url.Action(nameof(TrashController.TrashFile), typeof(TrashController).ControllerName()))" method="post" data-turboform>
                    <input type="hidden" name="@nameof(Model.Id)" value="@Model.Id" />
                    <button type="submit" class="dropdown-item">@Html.SvgIcon("delete", "danger") Trash</button>
                </form>
            }
        }
    </div>
</div>
