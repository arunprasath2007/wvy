@model Link
@{
    var linkProperties = LinkHelper.GetLinkProperties(Model);
}
<tr data-id="@Model.Id" data-item-guid="@Model.ItemGuid" data-allowed-parents="@Model.AllowedParentsString()" data-href="@linkProperties.Url" data-target="@linkProperties.Target">
    <td class="table-icon">
        @Html.SvgIcon(linkProperties.Icon)
    </td>
    <td class="py-2 align-middle">
        <div class="d-flex align-items-center">
            <a class="d-flex align-items-center d-desktop text-truncate" href="@linkProperties.Url" target="@linkProperties.Target" data-link-type="@Model.Provider">@Model.Title</a>
            <a class="d-flex align-items-center d-mobile text-truncate" href="@Model.Url" target="_blank">@Model.Title</a>

            @if (Model.IsDraft || Model.LockedById == User.Id) {
                <span class="badge badge-warning" title="You are editing this item">editing</span>
            } else if (Model is ILockable lockable && lockable.IsLocked()) {
                <span class="badge badge-secondary" title="Locked by @lockable.LockedBy().Title">locked</span>
            }
            @Html.StarToggle(Model, htmlAttributes: new { @class = "ml-auto flex-noscale" })
        </div>
    </td>
    <td>@Html.Time(Model.ModifiedAt, format: "g")</td>
    <td>@linkProperties.Kind.ToLower()</td>
    <td>--</td>
    <td class="table-icon">
        <div class="dropdown">
            <button type="button" class="btn btn-icon dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="Toggle Dropdown">
                @Html.SvgIcon("dots-vertical")
            </button>
            <div class="dropdown-menu dropdown-menu-right">
                @if (linkProperties.Kind != "link") {
                    <a class="dropdown-item" href="@Model.Url" target="_blank">@Html.SvgIcon(linkProperties.Icon)<span>Open in @linkProperties.Kind</span></a>
                }
                <button type="button" class="dropdown-item" data-toggle="modal" data-target="#share-modal" data-share-type="@Model.Type" data-share-id="@Model.Id" data-share-title="Share @Model.Kind">@Html.SvgIcon("share-variant", "success") Share</button>

                @if (Model.HasPermission(Permission.Edit)) {
                    if (linkProperties.Editable) {
                        if (Model.LockedById == User.Id) {
                            <a class="dropdown-item" href="@Model.Url()/edit">@Html.SvgIcon("pencil", "primary")<span>Edit</span></a>
                        } else if (Model.LockedById != null) {
                            <a class="dropdown-item" href="@Model.Url()/edit?force=true">@Html.SvgIcon("pencil", "primary")<span>Unlock and edit</span></a>
                        } else {
                            <a class="dropdown-item" href="@Model.Url()/edit">@Html.SvgIcon("pencil", "primary")<span>Edit</span></a>
                        }
                    }

                    <button class="dropdown-item" type="button" data-toggle="modal" data-target="#move-content-modal" data-path="@(Url.Action<ItemController>(c => c.MoveModal(Model.Id)))" title="Move @Model.Kind">@Html.SvgIcon("undo", "warning") Move</button>
                }


                @Html.StarToggle(Model, false, new { @class = "dropdown-item toggle-dropdown" })

                @if (Model.HasPermission(Permission.Delete)) {
                    <form action="@(Url.Action(nameof(ItemController.Trash), typeof(ItemController).ControllerName(), new { id = Model.Id }))" method="post" data-turboform>
                        <button type="submit" class="dropdown-item">@Html.SvgIcon("delete", "danger") Trash</button>
                    </form>
                }
            </div>
        </div>
    </td>
</tr>
