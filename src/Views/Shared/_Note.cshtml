@model StickyNote

<div class="card note note-@Model.NoteType.GetDisplayName().ToLower()" data-id="@Model.Id">
    <div class="card-header">
        <h6 class="card-title">@Model.Title</h6>
        @if (Model.HasPermission(Permission.Edit)) {
            <div class="dropdown">
                <button type="button" class="btn btn-icon dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="Toggle Dropdown">
                    @Html.SvgIcon("pin")
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                    <button class="dropdown-item" type="button" data-toggle="modal" data-target="#note-modal" data-path="@(Url.Action<NotesController>(c => c.Edit(Model.Id)))" data-color="@Model.NoteType.GetDisplayName().ToLower()" title="Edit sticky note">@Html.SvgIcon("pencil") Edit</button>
                    @if (Model.HasPermission(Permission.Delete)) {
                        <button class="dropdown-item" type="button" data-trash="note" data-id="@Model.Id">@Html.SvgIcon("delete") Trash</button>
                    }
                </div>
            </div>
        } else {
            <div class="dropdown p-1">
                @Html.SvgIcon("pin")
            </div>
        }
    </div>
    <div class="card-body">
        <p class="card-text">@Html.Raw(Model.Html)</p>
    </div>
    <div class="card-footer"><small>@Html.Time(Model.CreatedAt) by <a href="@Model.CreatedBy.Url()">@Model.CreatedBy.Title</a></small></div>
</div>
