@model LocalDomainEmailAddress
@{
    var prop = ViewData.ModelMetadata.ContainerType.GetProperty(ViewData.ModelMetadata.PropertyName);
    var meta = ViewData.ModelMetadata;    
    var state = ViewData.ModelState[ViewData.ModelMetadata.PropertyName + "." + nameof(Model.Email)];
    var feedback = state?.Errors?.FirstOrDefault()?.ErrorMessage;
    var attrs = new Dictionary<string, object>();

    var domains = SettingService.Get<Weavy.Core.Plugins.SystemSettings>().Domains;

    attrs["class"] = "form-control";
    attrs["placeholder"] = domains.IsNullOrEmpty() ? "email address" : "name";
    if (feedback != null) {
        attrs.Append("class", "is-invalid");
    }
}

<div class="form-group">
    <div class="input-group">
        @if (domains.IsNullOrEmpty()) {
            <div class="input-group-append"><div class="input-group-text">@Html.SvgIcon("email", "primary")</div></div>
            @Html.TextBoxFor(m => m.Email, attrs)
        } else if (domains.Count == 1) {
            @Html.TextBoxFor(m => m.Local, attrs)
            <input type="hidden" name="@ViewData.TemplateInfo.GetFullHtmlFieldName(nameof(Model.Domain))" id="@ViewData.TemplateInfo.GetFullHtmlFieldId(nameof(Model.Domain))" value="@domains[0]" />
            <div class="input-group-append"><div class="input-group-text">@@@domains[0]</div></div>
        } else {
            @Html.TextBoxFor(m => m.Local, attrs)
            @Html.DropDownListFor(m => m.Domain, domains.Select(x => new SelectListItem() { Text = "@" + x, Value = x }), new { @class = "custom-select input-group-append" })
        }
    </div>

    @if (feedback != null) {
        <div class="invalid-feedback d-flex ">@feedback</div>
    }
</div>




