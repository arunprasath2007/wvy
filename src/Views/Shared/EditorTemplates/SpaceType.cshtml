@model bool

@{
    var prop = ViewData.ModelMetadata.ContainerType.GetProperty(ViewData.ModelMetadata.PropertyName);
    var meta = ViewData.ModelMetadata;
    var state = ViewData.ModelState[ViewData.ModelMetadata.PropertyName];
    var feedback = state?.Errors?.FirstOrDefault()?.ErrorMessage;
    bool group = ViewData["FormGroup"] as bool? ?? !meta.HideSurroundingHtml;
    bool label = ViewData["FormLabel"] as bool? ?? !meta.HideSurroundingHtml;
    bool text = (ViewData["FormText"] as bool? ?? true) && meta.Description != null;
    var attrs = new Dictionary<string, object>();
    attrs["class"] = "form-control";
    if (feedback != null) {
        attrs.Append("class", "is-invalid");
    }
}

@if (group) {
    WriteLiteral(@"<div class=""form-group"">");
}
@if (label) {
    @Html.LabelFor(m => m)
}

<div class="custom-controls-stacked">
    <label class="custom-control custom-radio">
        <input class="custom-control-input" id="@ViewData.TemplateInfo.GetFullHtmlFieldId("space")" name="@ViewData.TemplateInfo.GetFullHtmlFieldName("")" type="radio" value="false" @(Model == false ? " checked" : "")>
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description">It's for a project</span>
    </label>
    <label class="custom-control custom-radio">
        <input class="custom-control-input" id="@ViewData.TemplateInfo.GetFullHtmlFieldId("team")" name="@ViewData.TemplateInfo.GetFullHtmlFieldName("")" type="radio" value="true" @(Model == true ? " checked" : "")>
        <span class="custom-control-indicator"></span>
        <span class="custom-control-description">It's for a team</span>
    </label>
</div>


@if (feedback != null) {
    <div class="invalid-feedback">@feedback</div>
} else if (text) {
    <div class="form-text">@meta.Description</div>
}
@if (group) {
    WriteLiteral(@"</div>");
}
